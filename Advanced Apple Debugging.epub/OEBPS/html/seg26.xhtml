<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <link rel="stylesheet" type="text/css" href="dbg.css"/>
  <title>Section IV: Custom LLDB Commands</title>
</head>
<body class="segment-section">

<!-- metadata: nil  -->


<h1 class="segment-section">Section IV: Custom LLDB Commands</h1>

<p>You’ve learned the basic LLDB commands, the assembly that goes into code and the miscellaneous low-level concepts that make a program...well, a program.
</p>
<p>It’s time to put that knowledge together to create some very powerful and complex debugging scripts. As you will soon see, you’re only limited by your skill and imagination — and finding the correct class (or header file) to do your debugging bidding.
</p>
<p>LLDB ships with an integrated Python module that allows you to access most parts of the debugger through Python. This lets you leverage all the power of Python (and its modules) to help uncover whatever dark secrets vex you.
</p>
<h3 class="segment-section">Chapter 17: Hello Script Bridging</h3>

<h3 class="segment-section">Chapter 18: Debugging Script Bridging</h3>

<h3 class="segment-section">Chapter 19: Script Bridging Classes and Hierarchy</h3>

<h3 class="segment-section">Chapter 20: Script Bridging with Options &amp; Arguments</h3>

<h3 class="segment-section">Chapter 21. Script Bridging with SBValue &amp; Language Contexts</h3>

<h3 class="segment-section">Chapter 22.  SB Examples, Improved Lookup</h3>

<h3 class="segment-section">Chapter 23. SB Examples, Resymbolicating a Stripped ObjC Binary</h3>

<h3 class="segment-section">Chapter 24. SB Examples, Malloc Logging</h3>
</body></html>
